// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//     provider = "prisma-client-js"
// }

// datasource db {
//     provider = "sqlite"
//     // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
//     // Further reading: 
//     // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
//     // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
//     url      = env("DATABASE_URL")
// }

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    member        Member[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Schema written by Damar starts here
model Space {
    id          String    @id @default(cuid())
    name        String
    // code        String?   @unique
    description String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    journal     Journal[]
    group       Group?
}

model Group {
    id      String   @id @default(cuid())
    code    String  @unique @default(uuid())
    space   Space?   @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    spaceId String   @unique
    member  Member[]
}

enum AccessLevel {
    Owner
    Member
}

model Member {
    id        String      @id @default(cuid())
    role      AccessLevel @default(Owner)
    user      User        @relation(fields: [userId], references: [id])
    userId    String
    group     Group?      @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    groupId   String
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    Journal   Journal[]
}

enum JournalType {
    Expense
    Income
    Others
}

model Journal {
    id                       String                     @id @default(cuid())
    name                     String
    description              String
    type                     JournalType                @default(Expense)
    amount                   Int                        @default(1)
    total                    Float                      @default(0)
    createdAt                DateTime                   @default(now())
    updatedAt                DateTime                   @updatedAt
    space                    Space                      @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    spaceId                  String
    member                   Member                     @relation(fields: [memberId], references: [id], onDelete: Cascade)
    memberId                 String
    JournalCategory          JournalCategory[]
    UniversalJournalCategory UniversalJournalCategory[]
}

model JournalCategory {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    journal   Journal  @relation(fields: [journalId], references: [id])
    journalId String
}

model UniversalJournalCategory {
    id        String    @id @default(cuid())
    name      String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    journal   Journal[]
}
